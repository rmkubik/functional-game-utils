import { pipe, curry } from "ramda";
import { isFunction, isPositive, mapIndexed } from "ramda-adjunct";
import { compareLocations } from "../matrices/locations";
import assert from "../assert";

/**
 * @description Creates an array on a specified length and filled with a specified value.
 *
 * @param {number} length - The length of the array to be filled.
 * @param {number} value - What value each index of the array will be filled with.
 */
const fillArray = curry((length, value) => Array(length).fill(value));

/**
 * @description Creates an array of the specified length and filled with 0s.
 *
 * @param {number} length - The length of the array to be filled.
 */
const initArray = length => fillArray(length, 0);

/**
 * @callback ArrayConstructor
 * @param {number} index - The index of the constructed value.
 */

/**
 * @description Creates an array of the specified length where each index is filled with the
 * result of running the constructor function.
 *
 * @param {ArrayConstructor} constructor - The function used to construct each value of the array.
 * @param {number} length - The length of the array to be filled.
 */
const constructArray = curry((constructor, length) => {
  assert(isFunction(constructor), "Constructor argument should be a function!");
  assert(isPositive(length), "Length argument should be a positive number!");

  return pipe(
    initArray,
    // Ignore the array value, and total original array.
    // These values are all generated by initArray and the user doesn't care.
    mapIndexed((_, index) => constructor(index))
  )(length);
});

const containsLocation = curry((array, location) =>
  Boolean(array.find(value => compareLocations(value, location)))
);

export { fillArray, initArray, constructArray, containsLocation };
