/**
 * @module Array
 */

import { pipe, curry, clone, times } from "ramda";
import { isFunction, isPositive, mapIndexed } from "ramda-adjunct";
import { compareLocations } from "../matrices/locations";
import assert from "../assert";

/**
 * @description Creates an array on a specified length and filled with a specified value.
 *
 * @function
 * @param {number} length - The length of the array to be filled.
 * @param {number} value - What value each index of the array will be filled with.
 * @returns {Object[]} Newly created array of values.
 */
const fillArray = curry((length, value) => times(() => clone(value), length));

/**
 * @description Creates an array of the specified length and filled with 0s.
 *
 * @param {number} length - The length of the array to be filled.
 * @returns {number[]} Newly created array of 0s.
 */
const initArray = (length) => fillArray(length, 0);

/**
 * @description A function used to construct the value of a given array index.
 *
 * @callback ArrayConstructor
 * @param {number} index - The index of the constructed value.
 */

/**
 * @description Creates an array of the specified length where each index is filled with the
 * result of running the constructor function.
 *
 * @param {ArrayConstructor} constructor - The function used to construct each value of the array.
 * @param {number} length - The length of the array to be filled. Must be a positive number not including zero.
 * @throws {AssertionError} - Will throw an error if constructor isn't a function.
 * @throws {AssertionError} - Will throw an error if length isn't a positive number not including zero.
 * @returns {Object[]} Newly created array of the constructed values.
 */
const constructArray = curry((constructor, length) => {
  assert(isFunction(constructor), "Constructor argument should be a function!");
  assert(isPositive(length), "Length argument should be a positive number!");

  return pipe(
    initArray,
    // Ignore the array value, and total original array.
    // These values are all generated by initArray and the user doesn't care.
    mapIndexed((_, index) => constructor(index))
  )(length);
});

/**
 * @description Does the provided array contain the location provided.
 *
 * @method
 * @param {Object[]} array - The array to be searched.
 * @param {Location} location - The location to ge searched for.
 * @returns {boolean} True if the location is present in the array.
 */
const containsLocation = curry((array, location) =>
  Boolean(array.find((value) => compareLocations(value, location)))
);

const findBestMatch = curry((evaluator, determineBetterFit, array) => {
  let currentBest;

  array.forEach((value, index) => {
    const evaluated = evaluator(value);

    if (currentBest === undefined) {
      currentBest = index;
    }

    if (determineBetterFit(evaluator(array[currentBest]), evaluated)) {
      currentBest = index;
    }
  });

  return currentBest;
});

export {
  fillArray,
  initArray,
  constructArray,
  containsLocation,
  findBestMatch,
};
